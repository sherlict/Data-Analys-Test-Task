import pandas as pd
import numpy as np

df = pd.read_csv('Test_Task.csv',thousands=' ', decimal=',')

# Replacing all non-numeric characters and converting values to numeric format (floating point data type)
df['Price'] = df['Price'].replace('[\D]', '', regex=True).astype(float)
df['Price'] = df['Price'] / 100

df['Shipping'] = df['Shipping'].replace('[\D]', '', regex=True).astype(float)
df['Shipping'] = df['Shipping'] / 100

df['quantity_sold'] = df['quantity_sold'].replace('[\D]', '', regex=True).astype(float)

df['Quantity'] = df['Quantity'].replace('[\D]', '', regex=True).astype(int)

# Comma-separate values, convert to numbers, and create a new column
df['Stock_History'] = df['Stock_History'].apply(lambda x: [int(i.replace(" ", "").replace("\xa0", "")) for i in x.split(',')])

# Create a second column with an offset one element back
df['Shifted_Stock_History'] = df['Stock_History'].apply(lambda x: x[1:] + [None])

# Calculate the sum of positive differences
df['Quantity_sold'] = df.apply(lambda row: sum([(y - x) if (y is not None and x is not None and y > x) 
                                else 0 for x, y in zip(row['Shifted_Stock_History'], row['Stock_History'])]), axis=1)

# Calculate the sum of positive increases
df['Quantity_added'] = df.apply(lambda row: sum([(y - x) if (y is not None and x is not None and y > x) 
                                else 0 for x, y in zip(row['Stock_History'], row['Shifted_Stock_History'])]), axis=1)

# Custom output option for pandas DataFrame, changing the output format for floating point numeric values.
pd.set_option('display.float_format', '{:,.2f}'.format)

df['Count_orders'] = df.apply(lambda row: sum(1 for x, y in zip(row['Stock_History'][:-1], 
                                     row['Stock_History'][1:]) if x > y) if len(row['Stock_History']) > 0 else 0, axis=1)

# Calculate the count of replenishments
df['Count_replenishments'] = df.apply(lambda row: sum(1 for x, y in zip(row['Stock_History'][:-1], 
                                             row['Stock_History'][1:]) if y > x) if len(row['Stock_History']) > 0 else 0, axis=1)

df['Net_price'] = df['Price'] - df['Shipping']

df['Sales_amount'] = df['Net_price'] * df['quantity_sold']

df['Count_high_demand'] = df['Stock_History'].apply(lambda x: x.count(0))

df['Rank_quantity_sold'] = df['Quantity_sold'].apply(lambda x: '1' if x / df['Quantity_sold'].max() * 100 > 70
                                                     else ('2' if 30 <= x / df['Quantity_sold'].max() * 100 <= 70
                                                     else '3'))
df['Rank_count_orders'] = df['Count_orders'].apply(lambda x: '1' if x / df['Count_orders'].max() * 100 > 70
                                                   else ('2' if 30 <= x / df['Count_orders'].max() * 100 <= 70
                                                   else '3'))
df['Rank_sales_amount'] = df['Sales_amount'].apply(lambda x: '1' if x / df['Sales_amount'].max() * 100 > 70
                                                   else ('2' if 30 <= x / df['Sales_amount'].max() * 100 <= 70
                                                   else '3'))
df['Rank_high_demand'] = df['Count_high_demand'].apply(lambda x: '1' if x / df['Count_high_demand'].max() * 100 > 70
                                                       else ('2' if 30 <= x / df['Count_high_demand'].max() * 100 <= 70
                                                       else '3'))
df['Rank_Shipping'] = df.apply(lambda row: '4' if row['Price'] == 0 
                                  else '1' if row['Shipping'] == 0 or (row['Shipping'] / max(row['Price'], 1) * 100 < 30) 
                                  else ('2' if 30 <= row['Shipping'] / max(row['Price'], 1) * 100 <= 70 
                                  else '3'), axis=1)

# Ratio of sales to warehouse filling
df['RSWF'] = df['Quantity_added'] / df['Quantity_sold']
df['RSWF'] = np.where(df['Quantity_sold'] != 0, df['Quantity_added'] / df['Quantity_sold'], np.nan)

df['Rank_RSWF'] = np.where(df['RSWF'] >= 1, '1', np.where((df['RSWF'] < 1) & (df['RSWF'] > 0.5), '2', '3'))

df['First_Value'] = df['Stock_History'].apply(lambda x: x[0] if len(x) > 0 else None)

df['QARR'] = df['Quantity_sold'] / (df['Quantity'] - df['First_Value']) / 2

df['Rank_QARR'] = df['QARR'].apply(lambda x: 1 if x > 0 else 3).astype('object')

df['Total_rank'] = df['Rank_quantity_sold'].astype(str) + df['Rank_count_orders'].astype(str) + df['Rank_sales_amount'].astype(str) + df['Rank_high_demand'].astype(str) + df['Rank_Shipping'].astype(str) + df['Rank_RSWF'].astype(str) + df['Rank_QARR'].astype(str)

selected_columns = ['SKU', 'Total_rank', 'Price', 'Shipping', 'Net_price', 'Quantity', 'Quantity_sold', 'Quantity_added', 'Sales_amount', 
                    'Count_high_demand', 'Count_orders', 'Count_replenishments', 'RSWF', 'QARR', 'Rank_RSWF', 'Rank_QARR', 'Stock_History']

sorted_df = df.sort_values(by='Total_rank', ascending=True)[selected_columns]

#sorted_df = df[(df['Quantity'] > 0) & (df['Net_price'] > 0)].sort_values(by='Total_rank', ascending=True)[selected_columns]

#print(sorted_df.head().to_string(index=False))
sorted_df.head()
